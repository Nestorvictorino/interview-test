{"version":3,"sources":["reducer.js","components/ToDoItem.js","components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["redurer","state","action","type","items","concat","payload","newTodos","filter","todo","completed","ToDoItem","toggleTodo","id","task","className","onChange","checked","ToDoList","todos","length","map","App","useReducer","reducer","dispatch","todoTaskRef","useRef","ref","placeholder","onClick","current","value","uuidv4","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAAe,SAASA,EAAQC,EAAOC,GACrC,OAAQA,EAAOC,MACb,IAAK,YACH,OAAO,2BACFF,GADL,IAEEG,MAAOH,EAAMG,MAAMC,OAAOH,EAAOI,QAAQF,SAG7C,IAAK,eACH,OAAO,2BACFH,GADL,IAEEG,MAAOH,EAAMG,QAGjB,IAAK,eACH,IAAMG,EAAWN,EAAMG,MAAMI,QAAO,SAACC,GAAD,OAAWA,EAAKC,aACpD,OAAO,2BACFT,GADL,IAEEG,MAAOG,IAGX,QACE,OAAON,G,WCNEU,EAdE,SAAC,GAA0B,IAAxBF,EAAuB,EAAvBA,KAAMG,EAAiB,EAAjBA,WAChBC,EAAwBJ,EAAxBI,GAAIC,EAAoBL,EAApBK,KAAMJ,EAAcD,EAAdC,UAKlB,OACE,qBAAIK,UAAU,kBAAd,UACE,uBAAOZ,KAAK,WAAWa,SANH,WACtBJ,EAAWC,IAKyCI,QAASP,IAC1DI,MCgBQI,EAxBE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOP,EAAiB,EAAjBA,WACvB,OACI,mCAEyB,IAAjBO,EAAMC,OACF,qBAAKL,UAAU,YAAf,SACI,0EAMJ,oBAAIA,UAAU,YAAd,SACKI,EAAME,KAAI,SAACZ,GACR,OACI,cAAC,EAAD,CAAUA,KAAMA,EAAoBG,WAAYA,GAArBH,EAAKI,Y,QCkDjDS,MA7Df,WACE,IADa,EAIaC,qBAAWC,EAHhB,CACnBpB,MAAO,KAFI,mBAINH,EAJM,KAICwB,EAJD,KAKPC,EAAcC,mBAsCpB,OACE,sBAAKZ,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,uBAAOZ,KAAK,OAAOyB,IAAKF,EAAaG,YAAY,YAAYd,UAAU,qCACvE,sBAAKA,UAAU,iBAAf,UACE,wBAAQe,QA9BM,WACpB,IAAMhB,EAAOY,EAAYK,QAAQC,MACpB,KAATlB,IAGFW,EAAS,CACPtB,KAAM,YACNG,QAAS,CACPF,MAAO,CAAC,CAAES,GAAIoB,cAAUnB,OAAMJ,WAAW,OAG7CgB,EAAYK,QAAQC,MAAQ,KAmBQjB,UAAU,SAA1C,iBACA,wBAAQe,QAhBO,WACrB,IAAMvB,EAAWN,EAAMG,MAAMI,QAAO,SAACC,GAAD,OAAWA,EAAKC,aACpDe,EAAS,CACPtB,KAAM,eACNG,QAAS,CACPF,MAAOG,MAW4BQ,UAAU,SAA3C,oCAGJ,cAAC,EAAD,CAAUI,MAAOlB,EAAMG,MAAOQ,WA9Cf,SAACC,GAClB,IAAMN,EAAQ,YAAON,EAAMG,OACrBK,EAAOF,EAAS2B,MAAK,SAACzB,GAAD,OAAUA,EAAKI,KAAOA,KACjDJ,EAAKC,WAAaD,EAAKC,UAEvBe,EAAS,CACPtB,KAAM,eACNG,QAAS,CACPF,MAAOG,QAwCkD,IAAzDN,EAAMG,MAAMI,QAAO,SAACC,GAAD,OAAWA,EAAKC,aAAWU,OAAe,GAC3D,sBAAKL,UAAU,cAAf,sBAAuCd,EAAMG,MAAMI,QAAO,SAACC,GAAD,OAAWA,EAAKC,aAAWU,OAArF,uBClDKe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c4ba3845.chunk.js","sourcesContent":["export default function redurer(state, action) {\n  switch (action.type) {\n    case \"set_items\": {\n      return {\n        ...state,\n        items: state.items.concat(action.payload.items),\n      };\n    }\n    case \"toggle_items\": {\n      return {\n        ...state,\n        items: state.items,\n      };  \n    }\n    case \"delete_items\": {\n      const newTodos = state.items.filter((todo) => !todo.completed);\n      return {\n        ...state,\n        items: newTodos,\n      };  \n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import React from 'react'\r\n\r\nconst ToDoItem = ({ todo, toggleTodo }) => {\r\n  const { id, task, completed } = todo;\r\n  const handleTodoClick = () => {\r\n    toggleTodo(id)\r\n}\r\n\r\n  return (\r\n    <li className='task-list__item'>\r\n      <input type=\"checkbox\" onChange={handleTodoClick} checked={completed} />\r\n      {task}\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default ToDoItem","import React from 'react'\r\nimport ToDoItem from './ToDoItem'\r\n\r\nconst ToDoList = ({ todos, toggleTodo }) => {\r\n    return (\r\n        <>\r\n            {\r\n                todos.length === 0 ?\r\n                    <div className='noTodoMsg'>\r\n                        <span>\r\n                            There's not to do,\r\n                            type and add one!\r\n                        </span>\r\n                    </div>\r\n                    :\r\n                    <ul className='task-list'>\r\n                        {todos.map((todo) => {\r\n                            return (\r\n                                <ToDoItem todo={todo} key={todo.id} toggleTodo={toggleTodo} />\r\n                            )\r\n                        })}\r\n                    </ul>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import { useReducer, useRef } from \"react\";\nimport \"./App.css\";\nimport reducer from \"./reducer\";\nimport ToDoList from './components/ToDoList';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nfunction App() {\n  const initialState = {\n    items: [],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const todoTaskRef = useRef();\n  const toggleTodo = (id) => {\n    const newTodos = [...state.items];\n    const todo = newTodos.find((todo) => todo.id === id);\n    todo.completed = !todo.completed\n\n    dispatch({\n      type: \"toggle_items\",\n      payload: {\n        items: newTodos\n      }\n    })\n  }\n  const handleToDoAdd = () => {\n    const task = todoTaskRef.current.value;\n    if (task === \"\") {\n      return;\n    } else {\n      dispatch({\n        type: \"set_items\",\n        payload: {\n          items: [{ id: uuidv4(), task, completed: false }]\n        },\n      })\n      todoTaskRef.current.value = \"\";\n    }\n  };\n\n  const handleToDoQuit = () => {\n    const newTodos = state.items.filter((todo) => !todo.completed);\n    dispatch({\n      type: \"delete_items\",\n      payload: {\n        items: newTodos\n      },\n    })\n  };\n\n  return (\n    <div className='container'>\n      <div className=' task-form'>\n        <input type=\"text\" ref={todoTaskRef} placeholder=\"New To Do\" className='task-form__input input-container' />\n        <div className='btns-container'>\n          <button onClick={handleToDoAdd} className='button'>Add</button>\n          <button onClick={handleToDoQuit} className='button'>Remove Completed</button>\n        </div>\n      </div>\n      <ToDoList todos={state.items} toggleTodo={toggleTodo} />\n      {\n        state.items.filter((todo) => !todo.completed).length === 0 ? \"\" :\n          <div className='missingTask'>You have {state.items.filter((todo) => !todo.completed).length} todo's left.</div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}